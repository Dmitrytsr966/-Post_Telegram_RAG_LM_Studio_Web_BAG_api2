### Документация для `state_manager.py`

#### **Обзор**
Класс `StateManager` управляет состоянием системы автопостинга, включая:
- Трекинг тем (обработанные, необработанные, с ошибками)
- Статистику работы системы
- Резервное копирование и восстановление состояния
- Системный статус и активность

---

#### **Ключевые функции**
1. **Управление темами**:
   - Добавление новых тем
   - Отслеживание прогресса обработки
   - Сброс неудачных тем
   
2. **Статистика**:
   - Учет успешных/неудачных операций
   - Расчет времени работы системы
   
3. **Надежное хранение**:
   - Атомарное сохранение состояния
   - Автоматическое восстановление при ошибках
   - Резервные копии

---

#### **Структура состояния**
```python
{
  "processed": {
    "topic_1": {
      "status": "success",
      "timestamp": "2025-07-16T12:30:45.123456",
      "details": {}  # Доп. информация
    }
  },
  "unprocessed": ["topic_2", "topic_3"],
  "failed": {
    "topic_4": {
      "status": "failed",
      "timestamp": "...",
      "error": {}  # Инфо об ошибке
    }
  },
  "statistics": {
    "topics_processed": 10,
    "success_count": 8,
    "error_count": 2,
    "start_time": "2025-07-16T09:00:00.000000"  # Время запуска системы
  },
  "system_status": "RUNNING",
  "last_activity": "2025-07-16T12:31:00.789012"  # Последнее действие
}
```

---

#### **Основные методы**

##### **Инициализация**
```python
def __init__(self, state_file: Union[str, Path] = "data/state.json")
```
- `state_file`: Путь к файлу состояния (по умолчанию `data/state.json`)
- Автоматически загружает состояние или инициализирует дефолтное

##### **Управление состоянием**
| Метод                          | Описание                                                                 |
|--------------------------------|--------------------------------------------------------------------------|
| `load_state()`                 | Загружает состояние из файла                                             |
| `save_state()`                 | Атомарно сохраняет состояние (через временный файл)                      |
| `_ensure_state_integrity()`    | Восстанавливает структуру при несоответствии                             |

##### **Работа с темами**
| Метод                          | Функция                                                                 |
|--------------------------------|-------------------------------------------------------------------------|
| `add_topic(topic)`             | Добавляет новую тему в `unprocessed`                                   |
| `mark_topic_processed(topic, success, details)` | Переносит тему в `processed`/`failed`, обновляет статистику |
| `get_next_unprocessed_topic()` | Возвращает следующую тему для обработки                                 |
| `reset_failed_topics()`        | Возвращает все неудачные темы в `unprocessed`                           |

##### **Статистика и мониторинг**
| Метод                          | Возвращает                              |
|--------------------------------|-----------------------------------------|
| `get_processing_statistics()`  | Словарь со статистикой                  |
| `get_system_uptime()`          | Аптайм системы в секундах               |
| `set_system_status(status)`    | Устанавливает статус ("RUNNING", "ERROR") |
| `get_last_activity()`          | Время последнего действия               |

##### **Резервное копирование**
| Метод                          | Описание                                |
|--------------------------------|-----------------------------------------|
| `backup_state()`               | Создает `.backup.json` копию состояния |
| `restore_state(backup_path)`   | Восстанавливает состояние из бэкапа     |

##### **Утилиты**
| Метод               | Функция                             |
|---------------------|-------------------------------------|
| `get(key, default)` | Получает значение по ключу состояния|
| `set(key, value)`   | Устанавливает значение              |
| `dump_state()`      | Возвращает состояние как JSON-строку|

---

#### **Особенности реализации**
1. **Атомарное сохранение**:
   - Данные пишутся во временный файл
   - Затем файл переименовывается в основной
   - Гарантирует целостность при сбоях

2. **Обратная совместимость**:
   - Автоматическое добавление отсутствующих полей
   - Сохранение работы при изменении структуры состояния

3. **Восстановление при ошибках**:
   - При повреждении файла инициализирует новое состояние
   - Детальное логирование проблем

4. **Локализация времени**:
   - Все временные метки в UTC (ISO 8601)
   - `datetime` для точных расчетов

---

#### **Примеры использования**

**Инициализация и добавление тем:**
```python
from modules.utils.state_manager import StateManager

state = StateManager()
state.add_topics(["AI", "Blockchain", "Quantum Computing"])
print(state.get_unprocessed_topics())
# ['AI', 'Blockchain', 'Quantum Computing']
```

**Обработка темы:**
```python
topic = state.get_next_unprocessed_topic()
try:
    # Генерация контента...
    state.mark_topic_processed(topic, success=True)
except Exception as e:
    state.mark_topic_processed(topic, success=False, details={"error": str(e)})
```

**Мониторинг системы:**
```python
print(f"System uptime: {state.get_system_uptime() // 3600} hours")
print(f"Last activity: {state.get_last_activity().strftime('%Y-%m-%d %H:%M')}")
```

**Экстренное восстановление:**
```python
if state.get_system_status() == "CORRUPTED":
    backup_file = "data/state.backup.json"
    if state.restore_state(backup_file):
        print("State restored from backup!")
```

---

#### **Логирование**
- **Предупреждения**: Отсутствие файла состояния, сброс тем
- **Ошибки**: Проблемы чтения/записи, восстановление из бэкапа
- **Информация**: Успешная загрузка/сохранение, резервные копии
- **Отладка**: Детали операций сохранения

Пример лога:
```
WARNING: State file data/state.json missing. Initializing default state.
INFO: State loaded from data/state.json
INFO: State backup saved to data/state.backup.json
```

---

#### **Рекомендации по использованию**
1. **Частота сохранения**:
   - Вызывайте `save_state()` после критических операций
   - Используйте `mark_topic_processed()` для автоматического сохранения

2. **Статусы системы**:
   - `INIT` → `RUNNING` при старте
   - `PAUSED` при временной остановке
   - `ERROR` при критических сбоях
   - `SHUTDOWN` перед остановкой

3. **Диагностика**:
   - Регулярно создавайте бэкапы (`backup_state()`)
   - Используйте `dump_state()` для отладки
   - Мониторьте `last_activity` для обнаружения "зависаний"