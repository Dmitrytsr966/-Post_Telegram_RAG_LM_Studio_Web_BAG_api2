# TelegramRAGSystem - Документация

## Обзор

`TelegramRAGSystem` - это автоматизированная система для создания и публикации контента в Telegram-канал с использованием RAG (Retrieval-Augmented Generation) технологии и языковой модели LM Studio.

## Архитектура системы

### Основные компоненты

```
TelegramRAGSystem
├── ConfigManager          # Управление конфигурацией
├── StateManager          # Управление состоянием обработки тем
├── RAGRetriever          # Система поиска и извлечения контекста
├── LMStudioClient        # Клиент для генерации текста
├── WebSearchClient       # Клиент для веб-поиска
├── TelegramClient        # Клиент для публикации в Telegram
├── PromptBuilder         # Сборка промптов из шаблонов
├── ContentValidator      # Валидация сгенерированного контента
└── MonitoringService     # Мониторинг и статистика
```

## Классы и компоненты

### MonitoringService

Сервис мониторинга для отслеживания статистики обработки тем.

```python
class MonitoringService:
    def __init__(self, logger)
    def log_success(self, topic)       # Регистрация успешной обработки
    def log_failure(self, topic, error) # Регистрация ошибки
    def report(self)                   # Отчет по статистике
```

**Атрибуты:**
- `topics_processed` - количество успешно обработанных тем
- `topics_failed` - количество неудачных попыток

### TelegramRAGSystem

Основной класс системы, координирующий работу всех компонентов.

#### Инициализация

```python
def __init__(self, config_path: str = "config/config.json")
```

**Параметры:**
- `config_path` - путь к файлу конфигурации (по умолчанию: "config/config.json")

**Этапы инициализации:**
1. Загрузка и валидация конфигурации
2. Настройка логирования
3. Инициализация всех сервисов
4. Автозагрузка тем из файла

#### Основные методы

##### setup_logging()
Настройка системы логирования с выводом информации о системе.

##### validate_configuration()
Валидация конфигурации. В случае ошибки завершает работу программы.

##### initialize_services()
Инициализация всех компонентов системы:

- **RAGRetriever** - система поиска по базе знаний
- **StateManager** - управление состоянием обработки тем
- **LMStudioClient** - клиент для генерации текста
- **WebSearchClient** - клиент для веб-поиска (Serper API)
- **TelegramClient** - клиент для публикации в Telegram
- **PromptBuilder** - построение промптов из шаблонов
- **ContentValidator** - валидация контента

##### autoload_topics()
Автоматическая загрузка новых тем из файла `data/topics.txt`.

**Логика:**
1. Читает темы из файла построчно
2. Фильтрует уже обработанные темы
3. Добавляет новые темы в очередь обработки

##### graceful_shutdown(signal, frame)
Обработчик сигналов для корректного завершения работы.

## Основной цикл обработки

### main_processing_loop()

Основной цикл обработки тем. Выполняется до получения сигнала завершения или исчерпания тем.

**Алгоритм обработки одной темы:**

1. **Получение темы** - извлечение следующей необработанной темы
2. **RAG поиск** - извлечение контекста из базы знаний
3. **Веб-поиск** - поиск дополнительной информации в интернете
4. **Объединение контекста** - соединение RAG и веб-контекста
5. **Построение промпта** - создание промпта из шаблонов
6. **Генерация контента** - отправка запроса в LM Studio
7. **Валидация** - проверка сгенерированного контента
8. **Публикация** - отправка в Telegram канал
9. **Обновление состояния** - отметка о завершении обработки

### Обработка контекста

#### truncate_rag_context(rag_context, limit=10000)
Ограничение размера RAG контекста для предотвращения переполнения.

**Параметры:**
- `rag_context` - исходный контекст
- `limit` - максимальный размер (по умолчанию: 10000 символов)

#### combine_contexts(rag_context, web_context)
Объединение RAG и веб-контекста в единый блок.

**Возвращает:**
- Объединенный контекст с метками источников
- Обработка случаев отсутствия одного из контекстов

### Управление состоянием

#### update_processing_state(topic, success)
Обновление состояния обработки темы.

**Параметры:**
- `topic` - обрабатываемая тема
- `success` - результат обработки (True/False)

#### handle_error(topic, error)
Централизованная обработка ошибок с логированием и обновлением статистики.

## Конфигурация

Система использует JSON конфигурацию со следующими секциями:

```json
{
  "rag": {
    "inform_folder": "inform/",
    "embedding_model": "all-MiniLM-L6-v2"
  },
  "lm_studio": {
    "base_url": "http://localhost:1234",
    "model": "qwen2.5-14b",
    "max_retries": 3
  },
  "telegram": {
    "max_retries": 3,
    "post_interval": 15
  },
  "serper": {
    "endpoint": "https://google.serper.dev/search",
    "results_limit": 10
  },
  "paths": {
    "prompt_folders": ["data/prompt_1", "data/prompt_2", "data/prompt_3"]
  }
}
```

## Файловая структура

```
project_root/
├── main.py                    # Основной файл системы
├── config/
│   └── config.json           # Конфигурация
├── data/
│   ├── topics.txt            # Список тем для обработки
│   ├── state.json            # Состояние обработки
│   ├── prompt_1/             # Шаблоны промптов (часть 1)
│   ├── prompt_2/             # Шаблоны промптов (часть 2)
│   └── prompt_3/             # Шаблоны промптов (часть 3)
├── inform/                   # База знаний для RAG
└── media/                    # Медиафайлы для публикации
```

## Особенности реализации

### Обработка ошибок
- Централизованная обработка через `handle_error()`
- Retry логика для LM Studio и Telegram API
- Логирование всех критических ошибок
- Graceful degradation при недоступности сервисов

### Мониторинг
- Подсчет успешных и неудачных обработок
- Регулярные отчеты по статистике
- Детальное логирование каждого этапа

### Оптимизация
- Ограничение размера RAG контекста (10k символов)
- Кэширование состояния обработки
- Автоматическая загрузка новых тем

### Безопасность
- Валидация конфигурации при запуске
- Обработка сигналов для корректного завершения
- Защита от переполнения памяти

## Логирование

Система использует структурированное логирование с уровнями:
- `DEBUG` - детальная отладочная информация
- `INFO` - общая информация о работе
- `WARNING` - предупреждения о потенциальных проблемах
- `ERROR` - ошибки обработки
- `CRITICAL` - критические ошибки, приводящие к завершению

## Запуск и использование

### Базовый запуск
```python
if __name__ == "__main__":
    system = TelegramRAGSystem()
    system.run()
```

### Пользовательская конфигурация
```python
system = TelegramRAGSystem("custom/config.json")
system.run()
```

## Зависимости

Основные внешние зависимости:
- `sentence-transformers` - для эмбеддингов
- `faiss-cpu` - для векторного поиска
- `requests` - для HTTP запросов
- `python-telegram-bot` - для Telegram API

## Ограничения

1. **RAG контекст** - максимум 10,000 символов
2. **Telegram** - ограничения API на размер сообщений
3. **LM Studio** - зависимость от локального сервера
4. **Веб-поиск** - лимиты Serper API

## Производительность

- **Интервал публикации** - настраиваемый (по умолчанию: 15 секунд)
- **Retry логика** - до 3 попыток для критических операций
- **Memory management** - автоматическая очистка контекста
- **Batch processing** - поддержка очереди тем

## Мониторинг и отладка

### Ключевые метрики
- Количество обработанных тем
- Процент успешных публикаций
- Время обработки одной темы
- Размер генерируемого контекста

### Логи для отладки
- Размер и превью контекста
- Статус каждого этапа обработки
- Детали ошибок с трассировкой
- Статистика использования компонентов