# PromptBuilder - Документация

## Описание

`PromptBuilder` - это Python-класс для динамической сборки промптов из шаблонов, расположенных в нескольких папках. Класс поддерживает загрузку шаблонов из текстовых файлов, их случайный выбор, валидацию структуры и замену плейсхолдеров на фактические значения.

## Основные возможности

- Загрузка шаблонов промптов из нескольких папок
- Случайный выбор и комбинирование шаблонов
- Валидация структуры промптов (проверка обязательных плейсхолдеров)
- Замена плейсхолдеров на реальные значения
- Детальное логирование процесса сборки
- Обработка ошибок при чтении файлов
- Резервный шаблон по умолчанию

## Структура класса

### Константы класса

```python
REQUIRED_PLACEHOLDERS = ["{TOPIC}", "{CONTEXT}"]
PLACEHOLDER_PATTERN = re.compile(r"\{[A-Z_]+\}")
```

- `REQUIRED_PLACEHOLDERS` - список обязательных плейсхолдеров, которые должны присутствовать в шаблонах
- `PLACEHOLDER_PATTERN` - регулярное выражение для поиска всех плейсхолдеров в тексте

### Атрибуты экземпляра

- `prompt_folders: List[Path]` - список путей к папкам с шаблонами
- `logger: logging.Logger` - логгер для записи событий
- `templates: Dict[str, List[str]]` - словарь шаблонов по папкам
- `_last_prompt_template: Optional[str]` - последний использованный шаблон

## API Reference

### Конструктор

```python
def __init__(self, prompt_folders: List[str])
```

**Параметры:**
- `prompt_folders` - список путей к папкам с файлами шаблонов (.txt)

**Описание:**
Инициализирует объект PromptBuilder, преобразует пути к папкам в объекты Path, настраивает логгер и автоматически загружает все доступные шаблоны.

### Публичные методы

#### `build_prompt(topic: str, context: str) -> Tuple[str, str]`

Основной метод для сборки готового промпта.

**Параметры:**
- `topic: str` - тема для замены плейсхолдера {TOPIC}
- `context: str` - контекст для замены плейсхолдера {CONTEXT}

**Возвращает:**
- `Tuple[str, str]` - кортеж из готового промпта и исходного шаблона

**Исключения:**
- `ValueError` - если topic или context пустые/не строки
- `ValueError` - если в промпте остались незамещенные обязательные плейсхолдеры

**Пример использования:**
```python
builder = PromptBuilder([
    "data/prompt_1",
    "data/prompt_2", 
    "data/prompt_3"
])

prompt, template = builder.build_prompt(
    topic="Ремонт двигателя",
    context="Информация о неисправностях и способах их устранения"
)
```

#### `load_prompt_templates() -> None`

Загружает все шаблоны из указанных папок.

**Описание:**
Сканирует каждую папку на наличие .txt файлов и сохраняет пути к ним в словаре `templates`. Логирует предупреждения для несуществующих папок и информацию о количестве загруженных шаблонов.

### Приватные методы

#### `_scan_prompt_folder(folder_path: Path) -> List[str]`
Сканирует папку и возвращает список путей к .txt файлам.

#### `_select_random_templates() -> List[str]`
Случайно выбирает по одному шаблону из каждой папки.

#### `_read_template_file(file_path: Optional[str]) -> str`
Читает содержимое файла шаблона с обработкой ошибок.

#### `_validate_prompt_structure(template: str) -> None`
Валидирует структуру шаблона:
- Проверяет наличие обязательных плейсхолдеров
- Предупреждает о дублированных плейсхолдерах
- Предупреждает о неподдерживаемых плейсхолдерах

#### `_find_unresolved_placeholders(text: str) -> List[str]`
Находит все незамещенные плейсхолдеры в тексте.

#### `_replace_placeholders(template: str, replacements: Dict[str, str]) -> str`
Заменяет плейсхолдеры на их значения.

#### `_default_template() -> str`
Возвращает резервный шаблон по умолчанию для случаев, когда не найдено ни одного шаблона.

## Пример структуры папок

```
project/
├── data/
│   ├── prompt_1/
│   │   ├── role_1.txt
│   │   ├── role_2.txt
│   │   └── role_3.txt
│   ├── prompt_2/
│   │   ├── task_1.txt
│   │   ├── task_2.txt
│   │   └── task_3.txt
│   └── prompt_3/
│       ├── requirements_1.txt
│       ├── requirements_2.txt
│       └── requirements_3.txt
```

## Пример содержимого шаблонов

**prompt_1/role_1.txt:**
```
Ты опытный механик грузовой техники с 15-летним стажем работы.
Работал в крупных автопарках, ремонтировал краны, фургоны, бортовые машины.
```

**prompt_2/task_1.txt:**
```
Напиши подробный анализ на тему: {TOPIC}

Используй следующую информацию: {CONTEXT}
```

**prompt_3/requirements_1.txt:**
```
Требования к тексту:
- Тон: профессиональный
- Длина: до 1000 символов
- Использовать технические термины
```

## Логирование

Класс использует стандартный модуль `logging` Python с именем логгера "PromptBuilder". Логируются следующие события:

- **WARNING**: Несуществующие папки, дублированные плейсхолдеры, неподдерживаемые плейсхолдеры, использование шаблона по умолчанию
- **INFO**: Количество загруженных шаблонов из каждой папки
- **ERROR**: Ошибки чтения файлов шаблонов

## Обработка ошибок

1. **Несуществующие папки** - логируется предупреждение, папка игнорируется
2. **Ошибки чтения файлов** - логируется ошибка, файл игнорируется
3. **Пустые или некорректные параметры** - выбрасывается `ValueError`
4. **Отсутствие шаблонов** - используется шаблон по умолчанию
5. **Незамещенные обязательные плейсхолдеры** - выбрасывается `ValueError`

## Расширение функциональности

Для добавления новых плейсхолдеров:

1. Добавьте их в `REQUIRED_PLACEHOLDERS` (если обязательные)
2. Обновите метод `build_prompt()` для передачи новых параметров
3. Добавьте соответствующие замены в словарь `replacements`

## Интеграция с другими модулями

В контексте RAG-системы `PromptBuilder` интегрируется с:

- **RAG Retriever** - получает контекст из базы знаний
- **Web Search** - получает дополнительный контекст из интернета
- **LM Client** - передает собранный промпт в языковую модель
- **Config Manager** - получает пути к папкам шаблонов из конфигурации

## Требования

- Python 3.7+
- Стандартные библиотеки: `os`, `random`, `logging`, `re`, `pathlib`, `typing`

## Производительность

- Загрузка шаблонов происходит один раз при инициализации
- Чтение файлов выполняется только при сборке промпта
- Валидация шаблонов кэшируется через `_last_prompt_template`