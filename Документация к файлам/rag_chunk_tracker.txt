# ChunkTracker - Система трекинга использования чанков знаний

## Описание

`ChunkTracker` - это класс для отслеживания использования чанков (фрагментов) знаний в RAG-системе. Основная цель - обеспечить разнообразие контента, предотвратить частое повторение одной и той же информации, а также предоставить аналитические данные для оптимизации системы.

## Назначение в архитектуре

В контексте RAG-системы для автопостинга в Telegram канал, `ChunkTracker` выполняет следующие функции:

- **Диверсификация контента**: Отслеживает частоту использования каждого чанка знаний и помогает выбирать менее используемые фрагменты
- **Penalty-система**: Применяет штрафы к часто используемым чанкам, снижая их приоритет при выборке
- **Аналитика**: Предоставляет статистику использования для анализа эффективности RAG-системы
- **Персистентность**: Сохраняет и загружает статистику использования между сессиями
- **Очистка данных**: Автоматически удаляет устаревшие записи для поддержания актуальности

## Основные компоненты

### Инициализация

```python
tracker = ChunkTracker(logger=custom_logger)
```

**Параметры:**
- `logger` (optional): Кастомный логгер. Если не указан, создается стандартный логгер с именем "ChunkTracker"

### Структура данных

Внутренняя структура хранения:
```python
{
    "chunk_id_1": [
        {"topic": "тема1", "timestamp": "2025-06-26T10:30:00"},
        {"topic": "тема2", "timestamp": "2025-06-26T11:45:00"}
    ],
    "chunk_id_2": [
        {"topic": "тема3", "timestamp": "2025-06-26T12:15:00"}
    ]
}
```

## API Методы

### Трекинг использования

#### `track_usage(chunk_id: str, topic: str, dt: datetime = None)`

Регистрирует факт использования чанка для определенной темы.

**Параметры:**
- `chunk_id`: Уникальный идентификатор чанка
- `topic`: Тема, для которой использовался чанк
- `dt`: Временная метка (по умолчанию - текущее время UTC)

**Пример:**
```python
tracker.track_usage("chunk_123", "Ремонт двигателей")
tracker.track_usage("chunk_456", "Диагностика тормозов", datetime(2025, 6, 26, 15, 30))
```

### Получение статистики

#### `get_usage_penalty(chunk_id: str) -> float`

Возвращает штрафной коэффициент для чанка (количество использований).

#### `get_usage_count(chunk_id: str) -> int`

Возвращает точное количество использований чанка.

#### `get_tracker_stats() -> dict`

Возвращает агрегированную статистику по всем отслеживаемым чанкам:
```python
{
    "total_tracked": 150,
    "usage_counts": {
        "chunk_123": 5,
        "chunk_456": 2,
        "chunk_789": 1
    }
}
```

### Выбор разнообразного контента

#### `get_diverse_chunks(candidates: List[Tuple[int, str]], limit: int = None) -> List[Tuple[int, str]]`

Сортирует кандидатов по частоте использования (от менее используемых к более используемым).

**Параметры:**
- `candidates`: Список кортежей (chunk_id, chunk_text)
- `limit`: Максимальное количество возвращаемых чанков

**Пример:**
```python
candidates = [(1, "текст1"), (2, "текст2"), (3, "текст3")]
diverse_chunks = tracker.get_diverse_chunks(candidates, limit=2)
# Вернет наименее используемые чанки
```

#### `apply_penalty_scores(chunks: List[Tuple[int, str]]) -> List[Tuple[int, str, float]]`

Добавляет штрафные оценки к списку чанков для внутренней сортировки.

### Персистентность данных

#### `save_usage_data(file_path: str)`

Сохраняет статистику использования в JSON файл.

#### `load_usage_data(file_path: str)`

Загружает статистику из JSON файла. Если файл не найден, инициализирует пустую статистику.

### Управление данными

#### `reset_usage_stats()`

Полностью очищает всю статистику использования.

#### `cleanup_old_usage(days_threshold: int = 30)`

Удаляет записи старше указанного количества дней.

**Пример:**
```python
# Очистить записи старше 7 дней
tracker.cleanup_old_usage(days_threshold=7)
```

## Интеграция с RAG-системой

### В контексте автопостинга

```python
# 1. Инициализация трекера
chunk_tracker = ChunkTracker()
chunk_tracker.load_usage_data("data/chunk_usage.json")

# 2. При получении кандидатов из retriever
retrieved_chunks = retriever.search(query="ремонт двигателей", top_k=10)

# 3. Выбор разнообразных чанков
diverse_chunks = chunk_tracker.get_diverse_chunks(retrieved_chunks, limit=5)

# 4. Использование выбранных чанков
for chunk_id, chunk_text in diverse_chunks:
    # Использование чанка в генерации контента
    context += chunk_text
    
    # Регистрация использования
    chunk_tracker.track_usage(chunk_id, current_topic)

# 5. Сохранение статистики
chunk_tracker.save_usage_data("data/chunk_usage.json")
```

### Периодическое обслуживание

```python
# Еженедельная очистка устаревших данных
def weekly_cleanup():
    tracker.cleanup_old_usage(days_threshold=30)
    tracker.save_usage_data("data/chunk_usage.json")
    
    # Получение статистики для мониторинга
    stats = tracker.get_tracker_stats()
    logger.info(f"Chunk usage stats: {stats}")
```

## Преимущества использования

1. **Качество контента**: Предотвращает повторы и обеспечивает разнообразие публикуемого материала
2. **Аналитика**: Позволяет анализировать, какие чанки знаний наиболее востребованы
3. **Оптимизация**: Помогает выявить недоиспользуемые источники информации
4. **Масштабируемость**: Автоматическая очистка предотвращает разрастание логов
5. **Надежность**: Graceful handling ошибок при работе с файлами

## Конфигурация

В `config.json` могут быть заданы параметры:

```json
{
    "chunk_tracker": {
        "usage_file": "data/chunk_usage.json",
        "cleanup_threshold_days": 30,
        "diversity_limit": 5,
        "auto_save_interval": 100
    }
}
```

## Логирование

Класс ведет подробные логи всех операций:
- DEBUG: Детали трекинга и выбора чанков
- INFO: Статистика и операции сохранения/загрузки
- WARNING: Ситуации с отсутствующими файлами
- ERROR: Критические ошибки при работе с файлами

## Потокобезопасность

⚠️ **Внимание**: Текущая реализация не является потокобезопасной. При использовании в многопоточной среде требуется дополнительная синхронизация.

## Зависимости

- `logging`: Стандартная библиотека Python для логирования
- `json`: Для сериализации/десериализации данных
- `datetime`: Для работы с временными метками
- `typing`: Для типизации

## Примеры использования

### Базовый пример

```python
import logging
from datetime import datetime
from rag_chunk_tracker import ChunkTracker

# Настройка логгера
logger = logging.getLogger("MyApp")
logger.setLevel(logging.INFO)

# Создание трекера
tracker = ChunkTracker(logger)

# Загрузка существующих данных
tracker.load_usage_data("usage_stats.json")

# Использование чанков
tracker.track_usage("engine_repair_001", "Диагностика двигателя")
tracker.track_usage("brake_system_045", "Тормозная система")

# Получение разнообразных чанков
candidates = [
    (1, "Информация о двигателях"),
    (2, "Тормозная система"),
    (3, "Подвеска автомобиля")
]

selected = tracker.get_diverse_chunks(candidates, limit=2)
print(f"Выбранные чанки: {[chunk[0] for chunk in selected]}")

# Сохранение статистики
tracker.save_usage_data("usage_stats.json")
```

### Расширенный пример с аналитикой

```python
# Получение детальной статистики
stats = tracker.get_tracker_stats()
print(f"Всего отслеживается чанков: {stats['total_tracked']}")

# Поиск наиболее используемых чанков
most_used = sorted(
    stats['usage_counts'].items(), 
    key=lambda x: x[1], 
    reverse=True
)[:5]

print("Топ-5 наиболее используемых чанков:")
for chunk_id, count in most_used:
    print(f"  {chunk_id}: {count} использований")

# Очистка старых данных
tracker.cleanup_old_usage(days_threshold=14)
```

Этот трекер является ключевым компонентом для обеспечения качества и разнообразия контента в автоматизированной системе публикации.