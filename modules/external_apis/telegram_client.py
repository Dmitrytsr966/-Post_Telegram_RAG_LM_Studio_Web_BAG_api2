import logging
import time
import requests
import random
import re
import json
from typing import Optional, Dict, Union, List

class TelegramClient:
    TELEGRAM_API_URL = "https://api.telegram.org"

    def __init__(self, token: str, channel_id: str, config: dict):
        self.logger = logging.getLogger("TelegramClient")
        self.token = token
        self.channel_id = channel_id
        self.config = config

        self.api_base = f"{self.TELEGRAM_API_URL}/bot{self.token}"

        self.max_text_length = config.get("max_text_length", 4096)
        self.max_caption_length = config.get("max_caption_length", 1024)
        self.parse_mode = config.get("parse_mode", "HTML")
        self.disable_preview = config.get("disable_web_page_preview", True)
        self.retry_attempts = config.get("retry_attempts", 3)
        self.retry_delay = config.get("retry_delay", 2)

        # –ö–Ω–æ–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
        self.default_buttons = [
            [
                {
                    "text": "üéÄ –†–∞–±–æ—Ç–∞ –º–æ–¥–µ–ª—å—é üéÄ",
                    "url": "https://t.me/Flagman_tm_bot"
                }
            ]
        ]

    @staticmethod
    def _telegram_code_units(text: str) -> int:
        """–ü–æ–¥—Å—á—ë—Ç –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞/caption –ø–æ code units (UTF-16) ‚Äî –∫–∞–∫ –≤ Telegram API."""
        return len(text.encode('utf-16-le')) // 2

    def _replace_casino_words(self, text: str) -> str:
        """–ó–∞–º–µ–Ω—è–µ—Ç —Å–ª–æ–≤–∞ '–∫–∞–∑–∏–Ω–æ' –∏ 'casino' –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –∑–∞–º–µ—â–µ–Ω–∏–µ–º '–∞' –∏ '–æ' –±—É–∫–≤–∞–º–∏ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞."""
        def replace_russian_casino(match):
            word = match.group(0)
            # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –∑–∞–º–µ–Ω—è–µ–º '–∞' –∏ '–æ' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
            result = word
            # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ '–∞' –Ω–∞ 'a'
            result = result.replace('–∞', 'a').replace('–ê', 'A')
            # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ '–æ' –Ω–∞ 'o'  
            result = result.replace('–æ', 'o').replace('–û', 'O')
            return result

        def replace_english_casino(match):
            word = match.group(0)
            # –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –∑–∞–º–µ–Ω—è–µ–º 'a' –∏ 'o' –Ω–∞ —Ä—É—Å—Å–∫–∏–µ
            result = word
            # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ 'a' –Ω–∞ '–∞'
            result = result.replace('a', '–∞').replace('A', '–ê')
            # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ 'o' –Ω–∞ '–æ'
            result = result.replace('o', '–æ').replace('O', '–û')
            return result

        # –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–≤–∫–ª—é—á–∞—è —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö lookbehind –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã
        text = re.sub(r'\b–∫–∞–∑–∏–Ω–æ\b', replace_russian_casino, text, flags=re.IGNORECASE)
        text = re.sub(r'(?<!\w)–∫–∞–∑–∏–Ω–æ(?!\w)', replace_russian_casino, text, flags=re.IGNORECASE)
        text = re.sub(r'(?<=-)–∫–∞–∑–∏–Ω–æ\b', replace_russian_casino, text, flags=re.IGNORECASE)
        text = re.sub(r'\b–∫–∞–∑–∏–Ω–æ(?=-)', replace_russian_casino, text, flags=re.IGNORECASE)
        
        # –ó–∞–º–µ–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–≤–∫–ª—é—á–∞—è —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å)
        text = re.sub(r'\bcasino\b', replace_english_casino, text, flags=re.IGNORECASE)
        text = re.sub(r'(?<!\w)casino(?!\w)', replace_english_casino, text, flags=re.IGNORECASE)
        text = re.sub(r'(?<=-)casino\b', replace_english_casino, text, flags=re.IGNORECASE)
        text = re.sub(r'\bcasino(?=-)', replace_english_casino, text, flags=re.IGNORECASE)
        
        return text

    def _check_minimum_length(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –º–µ–Ω–µ–µ 712 —Å–∏–º–≤–æ–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–µ–ª–æ–≤."""
        return len(text) >= 712

    def send_text_message(self, text: str, buttons: Optional[List] = None) -> bool:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        if not self._check_minimum_length(text):
            self.logger.warning(f"Text message too short: {len(text)} characters (minimum 712 required).")
            return False

        # –ó–∞–º–µ–Ω–∞ —Å–ª–æ–≤ –∫–∞–∑–∏–Ω–æ/casino
        text = self._replace_casino_words(text)

        length = self._telegram_code_units(text)
        if length > self.max_text_length:
            self.logger.warning(f"Text message exceeds Telegram limits: {length} > {self.max_text_length} code units.")
            return False

        reply_markup = self._build_inline_keyboard_markup(buttons or self.default_buttons)

        payload = {
            "chat_id": self.channel_id,
            "text": self.format_message(text),
            "parse_mode": self.parse_mode,
            "disable_web_page_preview": self.disable_preview,
            "reply_markup": reply_markup
        }
        result = self._post_with_retry("sendMessage", json=payload)
        if not result:
            self.logger.error(f"Failed to send text message (length={length} code units).")
        return result

    def send_media_message(self, text: str, media_path: str, buttons: Optional[List] = None) -> bool:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        if not self._check_minimum_length(text):
            self.logger.warning(f"Media caption too short: {len(text)} characters (minimum 712 required).")
            return False

        # –ó–∞–º–µ–Ω–∞ —Å–ª–æ–≤ –∫–∞–∑–∏–Ω–æ/casino
        text = self._replace_casino_words(text)

        length = self._telegram_code_units(text)
        if length > self.max_caption_length:
            self.logger.warning(f"Caption exceeds Telegram limits: {length} > {self.max_caption_length} code units.")
            return False

        media_type = self.get_media_type(media_path)
        method = {
            "photo": "sendPhoto",
            "video": "sendVideo",
            "document": "sendDocument"
        }.get(media_type)

        if not method:
            self.logger.error(f"Unsupported media format for file: {media_path}")
            return False

        reply_markup = self._build_inline_keyboard_markup(buttons or self.default_buttons)

        try:
            with open(media_path, "rb") as file:
                files = {media_type: file}
                data = {
                    "chat_id": self.channel_id,
                    "caption": self.format_message(text),
                    "parse_mode": self.parse_mode,
                    "reply_markup": reply_markup
                }
                result = self._post_with_retry(method, data=data, files=files)
                if not result:
                    self.logger.error(f"Failed to send media message (caption length={length} code units).")
                return result
        except Exception as e:
            self.logger.exception(f"Failed to open or send media: {media_path}")
            return False

    def _build_inline_keyboard_markup(self, buttons: List) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤ JSON-—Å—Ç—Ä–æ–∫—É, –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è reply_markup Telegram.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (–∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫), —Ç–∞–∫ –∏ –¥–≤—É–º–µ—Ä–Ω—ã–µ (–∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã)."""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–≤—É–º–µ—Ä–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
        if buttons and isinstance(buttons[0], list):
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
            keyboard = []
            for row in buttons:
                keyboard_row = []
                for btn in row:
                    keyboard_row.append({
                        "text": btn.get("text", ""),
                        "url": btn.get("url", "")
                    })
                keyboard.append(keyboard_row)
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–∫–∞–∂–¥–∞—è ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥)
            keyboard = [[{
                "text": btn.get("text", ""),
                "url": btn.get("url", "")
            }] for btn in buttons]
        
        return json.dumps({"inline_keyboard": keyboard}, ensure_ascii=False)

    def _post_with_retry(self, method: str, json: dict = None, data: dict = None, files: dict = None) -> bool:
        url = f"{self.api_base}/{method}"
        for attempt in range(1, self.retry_attempts + 1):
            try:
                response = requests.post(url, json=json, data=data, files=files, timeout=10)
                if response.status_code == 200:
                    self.logger.info(f"[Telegram] {method} successful.")
                    return True
                else:
                    self._log_telegram_failure(response, method)
                    if response.status_code in {400, 403}:
                        return False
                    if response.status_code == 429:
                        retry_after = response.json().get("parameters", {}).get("retry_after", 5)
                        self.logger.warning(f"Rate limited. Retrying in {retry_after}s...")
                        time.sleep(retry_after)
                        continue
            except Exception as e:
                self.logger.warning(f"Attempt {attempt}/{self.retry_attempts} failed for {method}: {str(e)}")
            time.sleep(self.retry_delay)
        self.logger.error(f"All attempts failed for {method}.")
        return False

    def _log_telegram_failure(self, response: requests.Response, method: str):
        try:
            payload = response.json()
        except ValueError:
            payload = {"error": "Invalid JSON from Telegram"}
        self.logger.warning(
            f"Telegram API failure [{method}]: {response.status_code} - {payload}"
        )

    def retry_send_message(self, message_data: dict, max_retries: int = 3) -> bool:
        return self._post_with_retry("sendMessage", json=message_data)

    def format_message(self, text: str) -> str:
        if self.parse_mode == "HTML":
            return text  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–µ–∫—Å—Ç —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º.
        return text

    def escape_html(self, text: str) -> str:
        return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

    def validate_message_length(self, text: str, has_media: bool) -> bool:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        if not self._check_minimum_length(text):
            return False
        
        limit = self.max_caption_length if has_media else self.max_text_length
        return self._telegram_code_units(text) <= limit

    def get_media_type(self, file_path: str) -> Optional[str]:
        ext = file_path.lower().split('.')[-1]
        if ext in ["jpg", "jpeg", "png", "webp"]:
            return "photo"
        elif ext in ["mp4", "mov", "avi"]:
            return "video"
        elif ext in ["pdf", "docx", "txt", "zip"]:
            return "document"
        return None

    def handle_telegram_errors(self, error: Exception) -> bool:
        self.logger.error(f"Handled Telegram error: {str(error)}")
        return False

    def check_bot_permissions(self) -> Dict[str, any]:
        try:
            resp = requests.get(f"{self.api_base}/getMe", timeout=10)
            data = resp.json()
            self.logger.info(f"Bot identity: {data}")
            return data
        except Exception:
            self.logger.error("Failed to fetch bot info.", exc_info=True)
            return {}

    def get_channel_info(self) -> Dict[str, any]:
        try:
            resp = requests.get(f"{self.api_base}/getChat", params={"chat_id": self.channel_id}, timeout=10)
            return resp.json()
        except Exception:
            self.logger.warning("Failed to retrieve channel info.", exc_info=True)
            return {}

    def get_send_stats(self) -> dict:
        return {
            "channel_id": self.channel_id,
            "token_hash": hash(self.token),
            "parse_mode": self.parse_mode,
            "retry_attempts": self.retry_attempts
        }
